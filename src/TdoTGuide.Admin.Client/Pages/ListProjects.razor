@page "/projects"

@using Microsoft.AspNetCore.Authorization
@using Microsoft.AspNetCore.Components.WebAssembly.Authentication
@using System.Text.Json

@attribute [Authorize]

@inject HttpClient Http

<PageTitle>Projekte - HTLVB TdoT Guide</PageTitle>

<h2 class="text-2xl mb-4">Projekte</h2>
<div class="flex flex-col gap-4">
    @if (projectList != null && projectList.Links.CreateProject != null)
    {
        <NavLink class="border-l-2 border-gray-400 hover:border-main rounded shadow hover:shadow-main p-2" href=@projectList.Links.CreateProject>
            <span class="text-4xl text-black align-middle">+</span>
            <span class="text-xl text-black align-middle">Neues Projekt anlegen</span>
        </NavLink>
    }

    @if (projectList == null)
    {
        <p><em>Projekte werden geladen...</em></p>
    }
    else if (projectList.Projects.Count == 0)
    {
        <p>Keine Projekte vorhanden.</p>
    }
    else
    {
        IEnumerable<ProjectDto> filteredProjects = projectList.Projects;
        filteredProjects = showOnlyUserProjects ? filteredProjects.Where(v => v.IsUserProject) : filteredProjects;
        filteredProjects = filterTags.Count > 0 ? filteredProjects.Where(v => v.Tags.Any(v => filterTags.Contains(v.Name))) : filteredProjects;
        filteredProjects = filterBuilding != null ? filteredProjects.Where(v => v.Building == filterBuilding) : filteredProjects;
        List<ProjectDto> filteredProjectList = filteredProjects.ToList();

        <div class="flex flex-col gap-2 border-gray-400 rounded shadow p-2">
            <div>
                <label class="inline-flex items-center relative gap-2">
                    <input type="checkbox" class="absolute left-1/2 -translate-x-1/2 w-full h-full peer appearance-none rounded-md" onchange=@((ChangeEventArgs e) => FilterUserProjects((bool)e.Value!)) />
                    <span class="w-12 h-6 flex items-center flex-shrink-0 p-1 bg-gray-300 rounded-full duration-300 ease-in-out peer-checked:bg-green-400 after:w-5 after:h-5 after:bg-white after:rounded-full after:shadow-md after:duration-300 peer-checked:after:translate-x-5"></span>
                    Nur meine Projekte anzeigen
                </label>
            </div>

            <div class="flex flex-col md:flex-row md:items-center gap-2">
                @foreach (var projectTag in projectList.AllProjectTags)
                {
                    var isSelected = filterTags.Contains(projectTag.Name);
                    var classes = isSelected ? "btn btn-blue-selected" : "btn";
                    var styles = isSelected ? $"background: {projectTag.Color}" : "";
                    <button type="button" @onclick=@(() => ToggleProjectTagFilter(projectTag.Name)) class="@classes" style="@styles">@projectTag.Name</button>
                }
            </div>

            <div class="flex flex-col md:flex-row md:items-center gap-2">
                @foreach (var building in projectList.AllBuildings)
                {
                    var isSelected = building.Id == filterBuilding;
                    var classes = isSelected ? "btn btn-blue-selected" : "btn";
                    <button type="button" @onclick=@(() => FilterProjectsByBuilding(building.Id)) class="@classes">@building.Name</button>
                }
            </div>

            <div class="flex flex-row flex-wrap gap-2 mt-2">
                @{
                    var projectCountText = filteredProjectList.Count == 1 ? "1 Projekt" : $"{filteredProjectList.Count} Projekte";
                }
                <div class="border border-black rounded bg-slate-100 font-semibold px-2 py-1">@projectCountText</div>
            </div>
        </div>

        @foreach (var project in filteredProjectList)
        {
            <ProjectListItem @key=project Project="@project" AllBuildings="@projectList.AllBuildings" OnUpdate="UpdateProject" OnDelete="@(() => RemoveProject(project))" />
        }
    }
</div>

@code {
    private readonly JsonSerializerOptions serializerOptions = new JsonSerializerOptions(JsonSerializerDefaults.Web);
    private ProjectListDto? projectList;
    private bool showOnlyUserProjects = false;
    private List<string> filterTags = [];
    private string? filterBuilding = null;

    protected override async Task OnInitializedAsync()
    {
        try
        {
            projectList = await Http.GetFromJsonAsync<ProjectListDto>("api/projects", serializerOptions);
        }
        catch (AccessTokenNotAvailableException exception)
        {
            exception.Redirect();
        }
    }

    private void FilterUserProjects(bool showOnlyUserProjects)
    {
        this.showOnlyUserProjects = showOnlyUserProjects;
        StateHasChanged();
    }

    private void ToggleProjectTagFilter(string tagName)
    {
        if (!filterTags.Remove(tagName))
        {
            filterTags.Add(tagName);
        }
    }

    private void FilterProjectsByBuilding(string building)
    {
        filterBuilding = filterBuilding == building ? null : building;
    }

    private void UpdateProject(ProjectDto oldProject, ProjectDto newProject)
    {
        projectList = projectList! with { Projects = projectList.Projects.Select(p => ReferenceEquals(p, oldProject) ? newProject : p).ToList() };
        StateHasChanged();
    }

    private void RemoveProject(ProjectDto project)
    {
        projectList = projectList! with { Projects = projectList.Projects.Except(new[] { project }).ToList() };
        StateHasChanged();
    }
}