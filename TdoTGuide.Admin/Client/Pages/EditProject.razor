@page "/projects/new"
@page "/projects/edit/{ProjectId}"

@using System.ComponentModel.DataAnnotations
@using System.Text.Json
@using Microsoft.AspNetCore.Components.WebAssembly.Authentication
@using System.Net.Http.Headers

@implements IAsyncDisposable

@inject HttpClient Http
@inject NavigationManager NavigationManager
@inject IJSRuntime JS

<PageTitle>Projekt bearbeiten - HTLVB TdoT Guide</PageTitle>

@if (ProjectId == null)
{
    <h2 class="text-2xl">Projekt anlegen</h2>
}
else
{
    <h2 class="text-2xl">Projekt bearbeiten</h2>
}
@if (editingProject == null)
{
    <p><em>Formular wird geladen...</em></p>
}
else if (editingProject.Links.Save != null)
{
    <EditForm Context="Edit" Model=@editingProject.Data OnValidSubmit=@ValidFormSubmitted>
        <DataAnnotationsValidator/>

        <fieldset disabled=@isSubmitting>
            <div class="input">
                <label class="block">
                    <span class="input-label">Titel</span>
                    <InputText @bind-Value=editingProject.Data.Title class="input-text w-full md:w-96" />
                </label>
            </div>

            <div class="input">
                <label class="block">
                    <span class="input-label">Beschreibung</span>
                    <InputTextArea @bind-Value=editingProject.Data.Description class="input-text w-full md:w-[32rem] h-48" />
                </label>
                <ul class="list-disc list-inside text-xs">
                    <li>Verwende <span class="text-lg text-orange-500"># Überschriften</span> und <span class="text-orange-500">* Aufzählungen</span></li>
                    <li>Formatiere Text <span class="italic text-orange-500">*kursiv*</span> und <span class="font-bold text-orange-500">**fett**</span></li>
                    <li>Zwei Zeilenumbrüche hintereinander erzeugen einen neuen Absatz</li>
                </ul>
            </div>

            <div class="input">
                <label class="block">
                    <span class="input-label">Gruppe</span>
                    <InputText @bind-Value=editingProject.Data.Group list="project-groups" class="input-text w-full md:w-96" />
                    <datalist id="project-groups">
                        @foreach (var groupName in editingProject.AllGroups)
                        {
                            <option value="@groupName"></option>
                        }
                    </datalist>
                </label>
            </div>

            <div class="input">
                <span class="input-label block">Abteilungen</span>
                <div class="flex flex-row flex-wrap gap-2 mt-2">
                    @foreach (var department in editingProject.AllDepartments)
                    {
                        var isSelected = editingProject.Data.Departments.Contains(department.Id);
                        var styles = isSelected ? $"background-color: {department.Color}" : "";
                        var classes = $"btn text-white !rounded-lg {(isSelected ? "" : "!text-inherit")}";
                        <button type="button" @onclick=@(() => ToggleSelectDepartment(department.Id)) value="@department.Id" class="@classes" style="@styles">@department.Name</button>
                    }
                </div>
            </div>

            <div class="input">
                <span class="input-label block">Multimedia-Dateien</span>
                <div class="flex flex-col items-start gap-2 mt-2">
                    <InputFile id="new-media" @ref=newMediaElement OnChange="SetMedia" accept="image/jpeg,image/png,video/mp4" multiple class="input-text !inline-block" />
                    @for (int i = editingProject.Data.ExistingMedia.Count - 1; i >= 0; i--)
                    {
                        var index = i; @* Capture variable *@
                        var style = editingProject.Data.ExistingMedia[i].Remove ? "btn line-through opacity-50" : "btn";
                        <a class="@style" @onclick=@(() => MarkMediaForRemoval(index))>@editingProject.Data.ExistingMedia[i].Name <i class="text-red-700 fa-solid fa-xmark"></i></a>
                    }
                </div>
            </div>

            <div class="input">
                <label class="block">
                    <span class="input-label">Ort</span>
                    <InputText @bind-Value=editingProject.Data.Location class="input-text w-full md:w-96" />
                </label>
            </div>
    
            <div class="input">
                <label class="block">
                    <span class="input-label">Organisator</span>
                    @if (editingProject.OrganizerCandidates.Count == 1)
                    {
                        <text>
                            @editingProject.OrganizerCandidates.FirstOrDefault(v => v.Id == editingProject.Data.OrganizerId)?.DisplayName
                        </text>
                    }
                    else
                    {
                        <InputSelect @bind-Value=editingProject.Data.OrganizerId class="input-select">
                        @foreach (var person in editingProject.OrganizerCandidates)
                        {
                            <option value=@person.Id>@person.DisplayName</option>
                        }
                        </InputSelect>
                    }
                </label>
            </div>

            <div class="input">
                <label class="block">
                    <span class="input-label">Betreuer</span>
                    <InputSelect @bind-Value=editingProject.Data.CoOrganizerIds class="input-select" size="15">
                    @foreach (var person in editingProject.CoOrganizerCandidates)
                    {
                        <option value=@person.Id>@person.DisplayName</option>
                    }
                    </InputSelect>
                </label>
                <span class="text-xs inline-block pt-2">Tipp: Halte die <kbd>Strg</kbd>-Taste gedrückt, um mehrere Betreuer auszuwählen.</span>
            </div>

            <div class="input">
                <span class="input-label block">Zeit</span>
                <InputRadioGroup @bind-Value=editingProject.Data.TimeSelection.Type>
                    <label class="block">
                        <InputRadio Value=TimeSelectionType.Continuous />
                        <span class="text-sm">Laufend</span>
                    </label>
                    <div>
                        <label>
                            <InputRadio Value=TimeSelectionType.Regular />
                            <span class="text-sm">Regelmäßig</span>
                        </label>
                        <span class="text-sm">alle <InputNumber @bind-Value=editingProject.Data.TimeSelection.RegularIntervalMinutes class="input-text !inline-block w-20" min="5" step="5" disabled=@(editingProject.Data.TimeSelection.Type != TimeSelectionType.Regular) /> Minuten</span>
                    </div>
                    <div>
                        <label>
                            <InputRadio Value=TimeSelectionType.Individual />
                            <span class="text-sm">Fixe Zeitpunkte</span>
                        </label>
                        <ul class="list-disc list-inside ml-6">
                            @for (var i = 0; i < editingProject.Data.TimeSelection.IndividualTimes.Count; i++)
                            {
                                var index = i; @* Capture variable *@
                                <li class="mt-2">
                                    <InputDate Type="InputDateType.DateTimeLocal" @bind-Value:get=editingProject.Data.TimeSelection.IndividualTimes[index] @bind-Value:set=@(value => SetIndividualTime(index, value)) disabled=@(editingProject.Data.TimeSelection.Type != TimeSelectionType.Individual) class="input-text !inline-block" />
                                </li>
                            }
                        </ul>
                    </div>
                </InputRadioGroup>
            </div>

            <ValidationSummary />

            <div class="input flex items-center gap-2">
                <button type="submit" class="btn btn-green" disabled=@isSubmitting>
                    @(ProjectId == null ? "Projekt anlegen" : "Projekt aktualisieren")
                </button>
                @if (isSubmitting)
                {
                    <span class="spinner spinner-green"></span>
                }
                @if (errorMessage != null)
                {
                    <span class="inline-block ml-2 text-red-500">@errorMessage</span>
                }
            </div>
        </fieldset>
    </EditForm>
}

@code {
    [Parameter]
    public string? ProjectId { get; set; }

    private EditingProject? editingProject;
    private bool isSubmitting;
    private string? errorMessage;

    private JsonSerializerOptions serializerOptions = new JsonSerializerOptions(JsonSerializerDefaults.Web);

    private InputFile? newMediaElement;

    private IJSObjectReference? jsModule;
    protected async override Task OnAfterRenderAsync(bool firstRender)
    {
        if (firstRender)
        {
            jsModule = await JS.InvokeAsync<IJSObjectReference>("import", "./Pages/EditProject.razor.js");
        }
    }

    protected override async Task OnInitializedAsync()
    {
        try
        {
            var project = (await Http.GetFromJsonAsync<EditingProjectDto>($"api/projects/edit/{(ProjectId != null ? ProjectId : "new")}", serializerOptions))!;
            editingProject = EditingProject.FromProject(project);
        }
        catch (AccessTokenNotAvailableException exception)
        {
            exception.Redirect();
        }
    }

    private void ToggleSelectDepartment(string departmentId)
    {
        if (editingProject == null)
        {
            return;
        }
        if (!editingProject.Data.Departments.Remove(departmentId))
        {
            editingProject.Data.Departments.Add(departmentId);
        }
    }

    private void SetMedia(InputFileChangeEventArgs e)
    {
        if (editingProject == null)
        {
            return;
        }
        editingProject.Data.NewMediaNames = [.. e.GetMultipleFiles().Select(v => v.Name)];
    }

    private void MarkMediaForRemoval(int index)
    {
        if (editingProject == null)
        {
            return;
        }
        editingProject.Data.ExistingMedia[index].Remove = !editingProject.Data.ExistingMedia[index].Remove;
        StateHasChanged();
    }

    private void SetIndividualTime(int index, DateTime? value)
    {
        if (editingProject == null)
        {
            return;
        }
        editingProject.Data.TimeSelection.IndividualTimes[index] = value;
        if (index == editingProject.Data.TimeSelection.IndividualTimes.Count - 1 && value != null)
        {
            editingProject.Data.TimeSelection.IndividualTimes.Add(null);
        }
    }

    private async Task ValidFormSubmitted(EditContext editContext)
    {
        if (editingProject == null)
        {
            return;
        }

        isSubmitting = true;
        errorMessage = null;
        StateHasChanged();
        try
        {
            var response = await Http.PostAsJsonAsync(editingProject.Links.Save, editingProject.Data.ToProjectData());
            response.EnsureSuccessStatusCode();
            var mediaUploadUrls = (await response.Content.ReadFromJsonAsync<string[]>())!;
            await jsModule!.InvokeVoidAsync("uploadMedia", [mediaUploadUrls]);
            NavigationManager.NavigateTo("/projects");
        }
        catch (Exception e)
        {
            Console.WriteLine(e.Message);
            errorMessage = "Projekt konnte nicht gespeichert werden.";
        }
        finally
        {
            isSubmitting = false;
        }
    }

    async ValueTask IAsyncDisposable.DisposeAsync()
    {
        if (jsModule is not null)
        {
            await jsModule.DisposeAsync();
        }
    }

    public record EditingProject(
        EditingProjectData Data,
        IReadOnlyCollection<string> AllGroups,
        IReadOnlyCollection<DepartmentDto> AllDepartments,
        IReadOnlyCollection<ProjectOrganizerDto> OrganizerCandidates,
        IReadOnlyCollection<ProjectOrganizerDto> CoOrganizerCandidates,
        EditingProjectLinksDto Links
    )
    {
        public static EditingProject FromProject(EditingProjectDto project)
        {
            return new EditingProject(
                EditingProjectData.FromProjectData(project.Data),
                project.AllGroups,
                project.AllDepartments,
                project.OrganizerCandidates,
                project.CoOrganizerCandidates,
                project.Links
            );
        }
    }

    public class EditingProjectData
    {
        [Required(ErrorMessage = "Titel darf nicht leer sein.")]
        public string Title { get; set; } = "";
        [Required(ErrorMessage = "Beschreibung darf nicht leer sein.")]
        public string Description { get; set; } = "";
        [Required(ErrorMessage = "Gruppe darf nicht leer sein.")]
        public required string Group { get; set; }
        public required List<string> Departments { get; init; }
        public List<ExistingMedia> ExistingMedia { get; set; } = [];
        public List<string> NewMediaNames { get; set; } = [];
        [Required(ErrorMessage = "Ort darf nicht leer sein.")]
        public string Location { get; set; } = "";
        [Required(ErrorMessage = "Organisator muss ausgewählt werden.")]
        public string? OrganizerId { get; set; }
        public string[] CoOrganizerIds { get; set; } = Array.Empty<string>();
        [CustomValidation(typeof(TimeSelection), nameof(EditProject.TimeSelection.Validate))]
        public TimeSelection TimeSelection { get; set; } = new();

        public static EditingProjectData FromProjectData(EditingProjectDataDto projectData)
        {
            return new EditingProjectData
            {
                Title = projectData.Title,
                Description = projectData.Description,
                Group = projectData.Group,
                Departments = [.. projectData.Departments],
                ExistingMedia = [.. projectData.MediaFileNames.Select(v => new ExistingMedia(v, remove: false))],
                Location = projectData.Location,
                OrganizerId = projectData.OrganizerId,
                CoOrganizerIds = projectData.CoOrganizerIds.ToArray(),
                TimeSelection = EditProject.TimeSelection.FromDto(projectData.TimeSelection),
            };
        }

        public EditingProjectDataDto ToProjectData()
        {
            return new EditingProjectDataDto(
                Title,
                Description,
                Group,
                Departments,
                NewMediaNames,
                [.. ExistingMedia.Where(v => v.Remove).Select(v => v.Name)],
                Location,
                OrganizerId ?? throw new InvalidOperationException("Organizer is empty. Did you forget to validate?"),
                CoOrganizerIds,
                TimeSelection.ToDto()
            );
        }
    }

    public class ExistingMedia
    {
        public ExistingMedia(string name, bool remove)
        {
            Name = name;
            Remove = remove;
        }

        public string Name { get; set; }
        public bool Remove { get; set; }
    }

    public class TimeSelection
    {
        public TimeSelectionType Type { get; set; } = TimeSelectionType.Continuous;
        public int RegularIntervalMinutes { get; set; } = 30;
        public List<DateTime?> IndividualTimes { get; set; } = [ null ];

        public TimeSelectionDto ToDto()
        {
            return new(
                Type switch {
                    TimeSelectionType.Continuous => TimeSelectionTypeDto.Continuous,
                    TimeSelectionType.Regular => TimeSelectionTypeDto.Regular,
                    TimeSelectionType.Individual => TimeSelectionTypeDto.Individual,
                    _ => TimeSelectionTypeDto.Continuous
                },
                RegularIntervalMinutes,
                IndividualTimes.OfType<DateTime>().ToList()
            );
        }

        public static TimeSelection FromDto(TimeSelectionDto timeSelection)
        {
            return new()
            {
                Type = timeSelection.Type switch {
                    TimeSelectionTypeDto.Continuous => TimeSelectionType.Continuous,
                    TimeSelectionTypeDto.Regular => TimeSelectionType.Regular,
                    TimeSelectionTypeDto.Individual => TimeSelectionType.Individual,
                    _ => TimeSelectionType.Continuous
                },
                RegularIntervalMinutes = timeSelection.RegularIntervalMinutes,
                IndividualTimes = timeSelection.IndividualTimes.Select(v => (DateTime?)v).Append(null).ToList()
            };
        }

        public static ValidationResult? Validate(TimeSelection value)
        {
            if (value.Type == TimeSelectionType.Regular)
            {
                if (value.RegularIntervalMinutes <= 0)
                {
                    return new ValidationResult("Zeitintervall muss positiv sein.");
                }
            }
            else if (value.Type == TimeSelectionType.Individual)
            {
                if (!value.IndividualTimes.Where(v => v != null).Any())
                {
                    return new ValidationResult("Mindestens ein Zeitpunkt muss angegeben werden.");
                }
                if (value.IndividualTimes.Any(v => v < DateTime.Now))
                {
                    return new ValidationResult("Zeitpunkte dürfen nicht in der Vergangenheit sein.");
                }
            }
            return null;
        }
    }

    public enum TimeSelectionType
    {
        Continuous,
        Regular,
        Individual
    }
}
